}
}
View(rasters)
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
ndvi_names <- names(ndvi_list)
field_to_ndvi <- list()  # Initialize an empty list
field_to_ndvi[["field_1_1_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240405T101559",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_1_2_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240405T101559",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_2_1_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240518T102559",
"ndvi_T32TMT_20240510T102021",
"ndvi_T32TMT_20240405T101559")
field_to_ndvi[["field_2_2_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240518T102559",
"ndvi_T32TMT_20240510T102021",
"ndvi_T32TMT_20240405T101559")
field_to_ndvi[["field_3_1_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_3_2_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_4_1_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_4_2_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_5_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_5_2_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_6_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
field_to_ndvi[["field_6_2_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
field_to_ndvi <- list()  # Initialize an empty list
field_to_ndvi[["field_1_1_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240405T101559",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_1_2_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240405T101559",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_2_1_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240518T102559",
"ndvi_T32TMT_20240510T102021",
"ndvi_T32TMT_20240405T101559")
field_to_ndvi[["field_2_2_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240518T102559",
"ndvi_T32TMT_20240510T102021",
"ndvi_T32TMT_20240405T101559")
field_to_ndvi[["field_3_1_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_3_2_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_4_1_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_4_2_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_5_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
field_to_ndvi[["field_5_2_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
field_to_ndvi[["field_6_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
field_to_ndvi[["field_6_2_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
field_to_ndvi[["field_5_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TMT_20240510T102021")
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
#4. Prepare NDVI per field calculations and visualisations
field_polygons <- ls(pattern = "Field_Code")
#transform to EPSG32632
for(name in field_polygons){
polygon_data <- get(name)
polygon_trans_to_32632(polygon_data,name)
}
#create field extents
#list of fields with transformed ellipsoid
transformed_fields <- ls(pattern = "^field_[0-9]_[0-9]_[0-9]$")
list_of_extents <- list() #prepare list containing field extents
for (name in transformed_fields){
#create name for field extents
extent_name <- paste(name,"extent",sep = "_")
#get the field corresponding sf
field <- get(name)
#create the extent shapefile.
extent_field <- ext(field)
#assign extent name to the field.
assign(extent_name, extent_field)
list_of_extents[[name]] <- extent_name
}
print(list_of_extents)
# Plot all extents
plot(all_extents, col = NA, border = "red", main = "Field Extents")
for (name in S2_dataframe$NDVI_name) {
plot(ndvi_list[[name]], main = paste("NDVI for", name))
}
plot(field_4_1_1)
plot(field_4_1_2)
field_to_ndvi[["field_4_1_2"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
field_to_ndvi[["field_4_1_2"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
field_to_ndvi <- list()  # Initialize an empty list
field_to_ndvi[["field_1_1_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240405T101559",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_1_2_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240405T101559",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_2_1_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240518T102559",
"ndvi_T32TMT_20240510T102021",
"ndvi_T32TMT_20240405T101559")
field_to_ndvi[["field_2_2_1"]] <- c("ndvi_T32TMT_20240203T103231",
"ndvi_T32TMT_20240518T102559",
"ndvi_T32TMT_20240510T102021",
"ndvi_T32TMT_20240405T101559")
field_to_ndvi[["field_3_1_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_3_2_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_4_1_2"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_4_2_1"]] <- c("ndvi_T32TMT_20240213T103141",
"ndvi_T32TMT_20240413T103031",
"ndvi_T32TMT_20240518T102559")
field_to_ndvi[["field_5_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TMT_20240510T102021")
field_to_ndvi[["field_5_2_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
field_to_ndvi[["field_6_1_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
field_to_ndvi[["field_6_2_1"]] <- c("ndvi_T32TLT_20240213T103141",
"ndvi_T32TLT_20240413T103031",
"ndvi_T32TLT_20240528T102559")
#6.plot extents per field####
for (field_name in names(field_to_ndvi)) {
# Retrieve the field
field <- get(field_name)
# Retrieve the NDVI rasters assigned to this field
ndvi_rasters <- field_to_ndvi[[field_name]]
# Plot each NDVI raster for this field
for (ndvi_name in ndvi_rasters) {
ndvi_raster <- ndvi_list[[ndvi_name]]
# Crop the NDVI raster to the field extent
ndvi_cropped <- crop(ndvi_raster, ext(field))
# Plot the cropped NDVI raster with the field boundary
plot(ndvi_cropped, main = paste("NDVI for", field_name, "from", ndvi_name),
col = terrain.colors(50))
plot(st_geometry(field), add = TRUE, border = "red", lwd = 2)
}
}
#00 set up environment----------------
#import libraries
library(tidyverse)
library(soiltexture)
library(ggplot2)
#source functions
source("./03_R/00_functions.R")
#import data
texture_averaged_clean <- readRDS("./01_input/texture_averaged_clean.rds")
View(texture_averaged_clean)
#00_Setup_Environment######
#import libraries
library(tidyverse)
library(ggplot2)
library(GGally)
library(knitr)
library(kableExtra)
library(officer)
#00_Setup_Environment######
#import libraries
library(tidyverse)
library(ggplot2)
library(GGally)
library(knitr)
library(kableExtra)
library(officer)
library(ISwR)
library(FactoMineR)
library("factoextra")
library("corrplot")
#load project functions
source("./03_R/00_functions.R")
#import datasets
soil_combined <- readRDS("./01_input/soil_data_combined.rds")
#01 prepare plotting###
soil_combined_rp <- plot_prepr(soil_combined)
num_var <- unlist(lapply(df,is.numeric))
num_var <- unlist(lapply(soil_combined_rp,is.numeric))
View(soil_combined_rp)
view(num_var)
soil_combined_rp_numeric <- soil_combined_rp[5:32]
View(soil_combined_rp_numeric)
apply(soil_combined_rp_numeric,2,mean)
apply(soil_combined_rp_numeric,2,var)
View(soil_combined_rp_numeric)
#remove further unsuitable variables
#24,25 -> C and C/N muffled -> many 0 values
#10,11 -> Al some values below LOQ -> invalid
#8,13,15,17,19 -> remove mg/kg values
#27 -> remove Humus -> only a factor of Corg
soil_combined_rp_numeric_cl <- soil_combined_rp_numeric %>% select(-c(24,25,10,11,8,13,15,17,19,27))
View(soil_combined_rp_numeric_cl)
soil_combined_rp_numeric_cl$row_nr <- 1:dim(soil_combined_rp_numeric_cl)[1]
View(soil_combined_rp_numeric_cl)
#3.2 conduct PCA
pr_out_soil <- prcomp(soil_combined_rp_numeric_cl, scale=T)
View(pr_out_soil)
#results PCA
loadings_soil <- pr_out_soil$rotation
View(loadings_soil)
pr_out_soil$x
pr_out_soil$sdev
pr_var_soil <- (pr_out_soil$sdev)^2
view(pr_var_soil)
pve_soil <- pr_var_soil/sum(pr_var_soil)
View(pr_out_soil)
pr_var_soil <- (pr_out_soil$sdev)^2
view(pr_var_soil))
view(pr_var_soil)
scipen(999)
options(scipen = 999)
pr_var_soil <- (pr_out_soil$sdev)^2
view(pr_var_soil)
view(pve_soil)
#3.3 Create PCA plots
#editing data for ggplot2
number_of_pc <- c(1:19)
PVE <- data.frame(number_of_pc,pve_soil)
View(PVE)
ggplot(PVE,aes(x=number_of_pc,y=pve_soil))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
ggtitle("Scree Plot")+
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
View(pr_out_soil)
pr_out_soil$x
pr_out_soil$sdev
#results PCA
loadings_soil <- pr_out_soil$rotation
View(loadings_soil)
PVE$pc_considered <- ifelse(number_of_pc<4,"yes","no")
View(PVE)
ggplot(PVE,aes(x=number_of_pc,y=pve_soil,color = factor(pc_considered,levels = c("yes","no"))))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
ggtitle("Scree Plot")+
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
ggplot(PVE,aes(x=number_of_pc,y=pve_soil,color = factor(pc_considered,levels = c("yes","no"))))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
scale_color_manual(values = c("green","red"))+
ggtitle("Scree Plot")+
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
scree_plot <- ggplot(PVE,aes(x=number_of_pc,y=pve_soil,color = factor(pc_considered,levels = c("yes","no"))))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
scale_color_manual(values = c("green","red"))+
guides(color=guide_legend(title = expression("PCs considered /nin Analyses")))+
ggtitle("Scree Plot")+
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
scree_plot
scree_plot <- ggplot(PVE,aes(x=number_of_pc,y=pve_soil,color = factor(pc_considered,levels = c("yes","no"))))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
scale_color_manual(values = c("green","red"))+
guides(color=guide_legend(title = expression("PCs considered /n in Analyses")))+
ggtitle("Scree Plot")+
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
scree_plot
scree_plot <- ggplot(PVE,aes(x=number_of_pc,y=pve_soil,color = factor(pc_considered,levels = c("yes","no"))))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
scale_color_manual(values = c("green","red"))+
guides(color=guide_legend(title = expression("PCs considered \nin Analyses")))+
ggtitle("Scree Plot")+
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
scree_plot
scree_plot <- ggplot(PVE,aes(x=number_of_pc,y=pve_soil,color = factor(pc_considered,levels = c("yes","no"))))+
theme_minimal()+
geom_point(shape=1,stat = "identity",size=3,stroke=1.5)+                      #define point size and shape
geom_line(color = "black", group=1, show.legend = FALSE)+                     #define connecting line, don't show in legend
scale_color_manual(values = c("green","red"))+
guides(color=guide_legend(title = expression("PCs considered \nin Analyses")))+
ggtitle("Scree Plot")+
theme(legend.position = "right",                                               #define legend parameters
plot.title=element_text(hjust=0.5,face = "bold"),axis.title.y = element_text(vjust=3))+ #define parameters of texts
labs(x="Number of Principal Components",y="Proportion of Variance Explained")
scree_plot
View(PVE)
sum(PVE$pve_soil[1:3])
ggsave("./02_output/screeplot.png",scree_plot,height = 15,width = 15,units = "cm")
#Biplot
biplot(pr_out_soil,scale = 0)
#Biplot
biplot(pr_out_soil,scale = 0,xlabs=rep("*",165),col=c("darkblue","red"))
install.packages(factorextra)
install.packages("factorextra")
install.packages("factoextra")
PC_vars <- sort(abs(loadings_soil),decreasing=TRUE)
View(loadings_soil)
PC_vars <- as.data.frame(sort(abs(loadings_soil),decreasing=TRUE))
View(PC_vars)
View(loadings_soil)
#Biplot
biplot(pr_out_soil,scale = 0,xlabs=rep("*",165),col=c("darkblue","red"))
#3.2 conduct PCA
pr_out_soil <- prcomp(soil_combined_rp_numeric_cl, scale=T)
#Biplot
biplot(pr_out_soil,scale = 0,xlabs=rep("*",19),col=c("darkblue","red"))
#Biplot
biplot(pr_out_soil,scale = 0,xlabs=rep("*",18),col=c("darkblue","red"))
#Biplot
biplot(pr_out_soil,scale = 0,xlabs=rep("*",36),col=c("darkblue","red"))
#Biplot
biplot(pr_out_soil,scale = 0,col=c("darkblue","red"))
library("factoextra")
library("factoextra")
#Biplot factoextra
my_palette <- colorRampPalette(c("darkgreen", "white", "purple"))(100)
View(scree_plot)
scree_plot
View(PVE)
fviz_pca_biplot(pr_out_soil, label = "var",col.ind = "black",col.var = "contrib",gradient.cols = my_palette,
repel = TRUE,select.var = list(contrib=10) )+
theme_minimal()+
labs(x= "PC1 (59.9 %)", y= "PC2 (11.3 %)")+
ggtitle("PCA Biplot")+
theme(plot.title=element_text(hjust = 0.5))
fviz_pca_biplot(pr_out_soil, label = "var",col.ind = "black",col.var = "contrib",gradient.cols = my_palette,
repel = TRUE,select.var = list(contrib=10) )+
theme_minimal()+
labs(x= "PC1 (59.9 %)", y= "PC2 (11.3 %)")+
ggtitle("PCA Biplot")+
theme(plot.title=element_text(hjust = 0.5))
fviz_pca_biplot(pr_out_soil, label = "var",col.ind = "black",col.var = "contrib",gradient.cols = my_palette,
repel = TRUE,select.var = list(contrib=15) )+
theme_minimal()+
labs(x= "PC1 (59.9 %)", y= "PC2 (11.3 %)")+
ggtitle("PCA Biplot")+
theme(plot.title=element_text(hjust = 0.5))
fviz_pca_biplot(pr_out_soil, label = "var",col.ind = "black",col.var = "contrib",gradient.cols = my_palette,
repel = TRUE,select.var = list(contrib=18) )+
theme_minimal()+
labs(x= "PC1 (59.9 %)", y= "PC2 (11.3 %)")+
ggtitle("PCA Biplot")+
theme(plot.title=element_text(hjust = 0.5))
fviz_pca_biplot(pr_out_soil, label = "var",col.ind = "black",col.var = "contrib",gradient.cols = my_palette,
repel = TRUE,select.var = list(contrib=10) )+
theme_minimal()+
labs(x= "PC1 (59.9 %)", y= "PC2 (11.3 %)")+
ggtitle("PCA Biplot")+
theme(plot.title=element_text(hjust = 0.5))
PCA_Biplot_soil <- fviz_pca_biplot(pr_out_soil, label = "var",col.ind = "black",col.var = "contrib",gradient.cols = my_palette,
repel = TRUE,select.var = list(contrib=10) )+
theme_minimal()+
labs(x= "PC1 (59.9 %)", y= "PC2 (11.3 %)")+
ggtitle("PCA Biplot")+
theme(plot.title=element_text(hjust = 0.5))
ggsave("./02_output/PCA_Biplot_soil.png",PCA_Biplot_soil,heigth=15,width = 15, units = "cm")
ggsave("./02_output/PCA_Biplot_soil.png",PCA_Biplot_soil,height = 15,width = 15, units = "cm")
#3.4 create PCA tables
pve_soil <- signif(pve_soil,2)
table_loadings <- data.frame(matrix(data = NA, nrow = 19, ncol = 19))
colnames(table_loadings) <- paste(1:19,". PC"," (",pve_soil,")",sep = "")
View(table_loadings)
#fill in loading data to the dataframe
for (i in 1:dim(loadings_soil)[1]){
sub <- loadings_soil[,i]
sorted <- sub[order(abs(sub), decreasing = T)]
n_sorted <- names(sorted)
v_sorted <- unname(sorted)
v_sorted <- signif(v_sorted,digits = 3)
sorted <- paste(n_sorted, " (",v_sorted,")", sep = "")
table_loadings[,i] <- sorted
rm(sub,n_sorted,v_sorted,sorted)
}
View(table_loadings)
