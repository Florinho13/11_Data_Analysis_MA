#----------------Rcode for SPRINT Datacleaning 13.08.23------------------------------------#
#---------Code by Florian Christ CSS4 University of Bern-----------------------------------#
#-Inspiration for the code derived from scripts from Natacha van Groenigen and Lingtong Gai#
#-Used Data from common folder -> 10.08.2023-----------------------------------------------#
#-Code developed and used with R-Version 4.2.2---------------------------------------------#
#-Code provides clean PPP-measurement-results.!! all measurements in mikrogramm/kg despite measurements in fluids ng/l#






#0.) Loading Libraries ########################################################
library(missMDA)
library(vctrs)
library(dplyr)
library(ISwR) #statistic library "introductory Statistic with R"
library(MASS) #car data from this library
library(ggplot2)
library(Hmisc)
library(plotly)
library(plotrix)
library(gmodels)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(ade4)
library(ExPosition)
library("factoextra")
library("corrplot")
library(HDoutliers)
library("ggpubr")
library(reshape2)
library(car)
library(MASS)
library(RColorBrewer)
library(openxlsx)
library(readxl)
library(pls)
library(afex)
library(lme4)
library(VGAM)
library(stringr)
library(huxtable)
library(scatterplot3d)
library(janitor)
library(stringr)

#clustering
library(tibble)
library(ggdendro)
library(dendextend)

#map
library(sf)
library(terra) # -> for raster data
library(tmap)   
library(leaflet)
library(sp)
library(ggmap)
library(raster)
library(gridExtra)



#1.) Load Data ################

excel_files <- list.files(path = "../0_Data", pattern = "*.xlsx", full.names = TRUE)
csv_files <- list.files(path = "../0_Data", pattern = "*.csv", full.names = TRUE)



for (file in excel_files){
  df <- read_excel(file,sheet = 2)
  filename <- tools::file_path_sans_ext(basename(file))
  assign(filename,df)
  
}

for (file in csv_files){
  df <- read_csv(file)
  filename <- tools::file_path_sans_ext(basename(file))
  assign(filename,df)
  
}



#2.) Data Preperation Human #####################################
Human_Metadata_useable <- Human_Metadata %>% 
 dplyr:: select(c(7,5,6)) %>%
  rename("Human_type"="Farmer/Neighbour/Consumer") %>% 
  rename("farmtype" = "Farming system") %>% 
  rename("sprint_sample_code"="Human sample Code")


##2.1 Preparing Human Blood Dataset#######################################
Human_Blood_PPP <- Human_Blood_PPP_02_08_23[-1,-c(2,3)] %>% 
  row_to_names(row_number = 1)

#prepare human Metadata
Human_Metadata_useable <- Human_Metadata[,c(7,5,6)] %>% 
  rename("human_type"="Farmer/Neighbour/Consumer") %>% 
  rename("farmtype" = "Farming system") %>% 
  rename("sprint_sample_code"="Human sample Code")


#Cleaning Country ID and edit country column
#replace ES with SP
Human_Blood_PPP <- Human_Blood_PPP %>% 
  mutate(country = substring(`SPRINT Sample code`,1,2),.after=1) %>%
  mutate(country = replace(country, country == "ES", "SP")) %>% 
  mutate(`SPRINT Sample code`= if_else(substring(`SPRINT Sample code`,1,2)=="ES",str_replace(Human_Blood_PPP$`SPRINT Sample code`,"^.{2}","SP"),`SPRINT Sample code`)) %>% 
  mutate(EHA = "Human",.after=2) %>% 
  dplyr:: select(-`participant type (if available)`) %>% 
  rename("sprint_sample_code" = "SPRINT Sample code") %>% 
  rename("Sex" = "Sex (if available)") %>% 
  relocate('Matrix',.after = "Sex")

Human_Blood_PPP$sprint_sample_code <- gsub("-","_",Human_Blood_PPP$sprint_sample_code)
Human_Blood_PPP$Sex <- gsub("female","F",Human_Blood_PPP$Sex)
Human_Blood_PPP$Sex <- gsub("male","M",Human_Blood_PPP$Sex)



Human_Blood_PPP_meta <- Human_Blood_PPP %>% 
  left_join(Human_Metadata_useable,by="sprint_sample_code",keep=FALSE) %>% 
  relocate(422,.after = "EHA" ) %>% 
  relocate(423,.after = "Sex")

Human_Blood_PPP_meta <- Human_Blood_PPP_meta %>% 
  mutate_at('farmtype', ~replace_na(., "unclassifiable")) %>% 
  mutate(farmtype = replace(farmtype,farmtype=="unknown","unclassifiable"))

Human_Blood_PPP_meta_clean <- SPRINT_Cleaner(Human_Blood_PPP_meta,"Glyphosate")

empty_columns <- colSums(is.na(Human_Blood_PPP_meta)| Human_Blood_PPP_meta=="")


##2.2 Preparing Human Wristband Dataset#####################
Human_Wristband_PPP <- Human_Wristband_PPP_7_8_2023[,-c(2,3)] %>% 
  row_to_names(row_number = 1)

Human_Metadata_useable <- Human_Metadata %>% 
  dplyr:: select(c(7,5,3,6)) %>%
  rename("human_type"="Farmer/Neighbour/Consumer") %>% 
  rename("farmtype" = "Farming system") %>% 
  rename("sprint_sample_code"="Human sample Code") %>% 
  rename("Sex"="Gender")

#Cleaning Country ID and edit country column
#replace SI with SL
Human_Wristband_PPP <- Human_Wristband_PPP %>% 
  rename("sprint_sample_code" = "SPRINT Sample code")
  

  Human_Wristband_PPP$sprint_sample_code <- gsub(" ","",Human_Wristband_PPP$sprint_sample_code)

Human_Wristband_PPP <- Human_Wristband_PPP %>% 
    mutate(sprint_sample_code= if_else(substring(sprint_sample_code,1,2)=="SI",str_replace(Human_Wristband_PPP$sprint_sample_code,"^.{2}","SL"),sprint_sample_code)) %>% 
    mutate(sprint_sample_code= if_else(substring(sprint_sample_code,1,2)=="Sl",str_replace(Human_Wristband_PPP$sprint_sample_code,"^.{2}","SL"),sprint_sample_code)) %>% 
    mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
    mutate(EHA = "Human",.after=2)

Human_Wristband_PPP_meta <- Human_Wristband_PPP %>% 
  left_join(Human_Metadata_useable,by="sprint_sample_code") %>%  
  relocate(417,.after = "EHA" ) %>% 
  relocate(418,.after = "human_type") %>%
  relocate(419,.after = "Sex")


#summarise two samples as mean as there are two analyses for them
Human_Wristband_PPP_DP <- Human_Wristband_PPP %>% 
  filter(sprint_sample_code=="SL_H48-1"|sprint_sample_code=="SL_H48-2"|sprint_sample_code=="NL_H23-1"|sprint_sample_code=="NL_H23-2") %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(5:416),as.numeric) %>% 
  group_by(country) %>% 
  summarise(across(where(is.numeric),funs(mean = mean(ifelse(. > 0, ., NA), na.rm = TRUE)))) %>% 
  mutate(sprint_sample_code = c("NL_H23","SL_H48"),.before=1)


Human_Wristband_PPP_DP <- Human_Wristband_PPP_DP %>% 
  mutate_all(~ifelse(is.nan(.),NA,.)) %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Human",.after=2) %>% 
  mutate(Matrix = "Wristband",.after=3) %>% 
  mutate_at(vars(5:416),as.numeric)

  
#Make sure that only values that were really NA are counted as such. This replaces NAs which previously were a zero with the zero again
Human_Wristband_PPP_DP_Control <- Human_Wristband_PPP %>% 
  dplyr:: filter(sprint_sample_code=="SL_H48-1"|sprint_sample_code=="NL_H23-1") %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(5:416),as.numeric)



for(j in c(1,2)){
  for(i in c(5:416)){
    Human_Wristband_PPP_DP[j,i] <- ifelse(is.na(Human_Wristband_PPP_DP[j,i]),Human_Wristband_PPP_DP_Control[j,i],Human_Wristband_PPP_DP[j,i])
  }
}

Human_Wristband_PPP_meta_DP <- Human_Wristband_PPP_DP %>% 
  left_join(Human_Metadata_useable,by="sprint_sample_code") %>% 
  relocate(417,.after = "EHA" ) %>% 
  relocate(418,.after = "human_type") %>%
  relocate(419,.after = "Sex")


colnames(Human_Wristband_PPP_meta_DP)  <- gsub("_mean$","",colnames(Human_Wristband_PPP_meta_DP))


Human_Wristband_PPP_meta <- Human_Wristband_PPP_meta %>%
  filter(sprint_sample_code!="SL_H48-1"&sprint_sample_code!="SL_H48-2"&sprint_sample_code!="NL_H23-1"&sprint_sample_code!="NL_H23-2")

#Add the two rows containing mean values from NL_H23 and SL_H46
Human_Wristband_PPP_meta <- rbind(Human_Wristband_PPP_meta,Human_Wristband_PPP_meta_DP) %>% 
  mutate_at("farmtype", ~replace_na(., "unclassifiable")) %>% 
  mutate(farmtype = replace(farmtype, farmtype == "unknown", "unclassifiable")) %>% 
  mutate_at(vars(8:419),as.character)


empty_columns <- colSums(is.na(Human_Wristband_PPP_meta)| Human_Wristband_PPP_meta=="") == nrow(Human_Wristband_PPP_meta)
empty_columns <- colSums(is.na(Human_Wristband_PPP_meta)| Human_Wristband_PPP_meta=="")
empty_columns <- rbind(Human_Wristband_PPP_meta[1,1:ncol(Human_Wristband_PPP_meta)],empty_columns)
#write.xlsx(empty_columns, "../444_Data_Preparation/Empty_Cells_perColumn_Human_Wristband.xlsx",rowNames=T)

Human_Wristband_PPP_meta_clean <- SPRINT_Cleaner(Human_Wristband_PPP_meta,"2,4-D (free)")
Human_Wristband_PPP_meta_clean_o <- SPRINT_order(Human_Blood_PPP_meta_clean,Human_Wristband_PPP_meta_clean)

Name_Check<- Colnames_Check(Human_Wristband_PPP_meta_clean,Human_Blood_PPP_meta_clean)



##2.3 Prepare Human_Urine#########################
Human_Urine_PPP <- Human_urine_PPP_results_GLY_AMPA_25_5_2023_no_DPA[,-c(2,3)] %>% 
  row_to_names(row_number = 1) %>% 
  rename("human_type"="participant type (if available)") %>% 
  rename("Sex"="Sex (if available)") %>% 
  rename("sprint_sample_code"="SPRINT Sample code")

#cleaning of the sprint_sample_code -> in preparation to add metadata
Human_Urine_PPP$sprint_sample_code <- gsub("3/3$","",Human_Urine_PPP$sprint_sample_code)
Human_Urine_PPP$sprint_sample_code <- gsub("_$","",Human_Urine_PPP$sprint_sample_code)
Human_Urine_PPP$sprint_sample_code <- gsub("-","_",Human_Urine_PPP$sprint_sample_code)
Human_Urine_PPP$sprint_sample_code <- gsub("_U_P$","",Human_Urine_PPP$sprint_sample_code)
Human_Urine_PPP$sprint_sample_code <- gsub("_U$","",Human_Urine_PPP$sprint_sample_code)

Urine_Gly_AMPA_colnames <- colnames(Human_Urine_PPP)

#prepare multi data set for join
Human_Urine_Multi_prepared <- Human_urine_PPP_results_MULTI_12_7_2023_no_DPA_HM[-c(1,2),-c(2,3,7,8,9,10,11,12,14,15,24,42,45,47,54,57:114)] %>% #Cleaning of measurements not occuring in other matrixes if they were not measured or analysed
  row_to_names(row_number = 1) %>% 
  rename("human_type"="participant type (if available)") %>% 
  rename("Sex"="Sex (if available)") %>% 
  rename("sprint_sample_code"="SPRINT Sample code")

Human_Urine_Multi_prepared$sprint_sample_code <- gsub("-","_",Human_Urine_Multi_prepared$sprint_sample_code)

  
Urine_Multi_colnames <- colnames(Human_Urine_Multi_prepared)


#uniform colname
CheckColname <- Urine_Multi_colnames %in% Urine_Gly_AMPA_colnames
Human_Urine_Multi_prepared <- rbind(Human_Urine_Multi_prepared,CheckColname)
Human_Urine_Multi_Name_Check <- Human_Urine_Multi_prepared[737,]


#combine the Urine Datasets
Human_Urine_Multi_PPP <- Human_Urine_Multi_prepared[,-c(2:4)]
Urine_Multi_colnames_PPP <- colnames(Human_Urine_Multi_PPP[,2:38])

Human_Urine_combined <- left_join(Human_Urine_PPP,Human_Urine_Multi_PPP,by="sprint_sample_code",keep=F)
merged_columnnames <- colnames(Human_Urine_combined)

for (PPP in Urine_Multi_colnames_PPP){
  columnname_x <- paste0(PPP,".x")
  columnname_y <- paste0(PPP,".y")
  if (columnname_x %in% merged_columnnames & columnname_y %in% merged_columnnames){
    Human_Urine_combined <- Human_Urine_combined %>% 
      mutate({{PPP}}:="")
    for (i in 1:nrow(Human_Urine_combined)){
      Human_Urine_combined[i,PPP] <-  ifelse(is.na(Human_Urine_combined[i,columnname_x]),Human_Urine_combined[i,columnname_y],Human_Urine_combined[i,columnname_x]) 
    }
    Human_Urine_combined <- Human_Urine_combined %>% 
    dplyr::select(-all_of(columnname_x),-all_of(columnname_y))
  }
}


#prepare metadata
Human_Metadata_useable <- Human_Metadata %>% 
  dplyr:: select(c(7,5,3,6)) %>%
  rename("human_type"="Farmer/Neighbour/Consumer") %>% 
  rename("farmtype" = "Farming system") %>% 
  rename("sprint_sample_code"="Human sample Code") %>% 
  rename("Sex"="Gender")
#add the metadata 
Human_Urine_combined_meta <- Human_Urine_combined %>%
  dplyr:: select(-c(3,4)) %>%
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Human",.after=2) %>% 
  left_join(Human_Metadata_useable,by="sprint_sample_code") %>% 
  relocate("human_type",.after = "EHA" ) %>% 
  relocate("Sex",.after = "human_type") %>%
  relocate("farmtype",.after = "Sex") %>% 
  relocate("Matrix",.after = "farmtype") %>% 
  mutate_at('farmtype', ~replace_na(., "unclassifiable")) %>% 
  mutate_at(vars(8:425),as.character)

empty_columns <- colSums(is.na(Human_Urine_combined_meta)| Human_Urine_combined_meta=="") == nrow(Human_Urine_combined_meta)
empty_columns <- colSums(is.na(Human_Urine_combined_meta)| Human_Urine_combined_meta=="")  

str(Human_Urine_combined_meta)
Human_Urine_combined_meta_clean <- SPRINT_Cleaner_noLOQISSUE(Human_Urine_combined_meta,"Glyphosate")

Name_Check <- Colnames_Check(Human_Urine_combined_meta_clean,Human_Blood_PPP_meta_clean)
Urine_PPP <- colnames(Name_Check)
#order columns in order to combine data
Human_Urine_toOrder <- Human_Urine_combined_meta_clean %>% 
  dplyr:: select(!all_of(Urine_PPP))

Human_Urine_BonusPPP <- Human_Urine_combined_meta_clean %>% 
  dplyr:: select(all_of(Urine_PPP))

Human_Urine_ordered <- SPRINT_order(Human_Blood_PPP_meta_clean,Human_Urine_toOrder)

Human_Urine_combined_meta_clean_o <- Human_Urine_ordered %>% 
  bind_cols(Human_Urine_BonusPPP)


##2.4 Prepare Human faeces Data ###############################################
Human_Faeces_PPP <- Human_faeces_PPP_02_08_2023[-c(1:3),-c(2,3)] %>% 
  row_to_names(row_number = 1) %>% 
  rename("human_type"="participant type (if available)") %>% 
  rename("Sex"="Sex (if available)") %>% 
  rename("sprint_sample_code"="SPRINT Sample code")

#cleaning of the sprint_sample_code -> in preparation to add metadata
Human_Faeces_PPP$sprint_sample_code <- gsub("_4/4$","",Human_Faeces_PPP$sprint_sample_code)
Human_Faeces_PPP$sprint_sample_code <- gsub("_S_P","",Human_Faeces_PPP$sprint_sample_code)
Human_Faeces_PPP$sprint_sample_code <- gsub("_F_P","",Human_Faeces_PPP$sprint_sample_code)
Human_Faeces_PPP$sprint_sample_code <- gsub("_S$","",Human_Faeces_PPP$sprint_sample_code)
Human_Faeces_PPP$sprint_sample_code <- gsub("_S_4/5$","",Human_Faeces_PPP$sprint_sample_code)
Human_Faeces_PPP$sprint_sample_code <- gsub("-","_",Human_Faeces_PPP$sprint_sample_code)

#prepare metadata
Human_Metadata_useable <- Human_Metadata %>% 
  dplyr:: select(c(7,5,3,6)) %>%
  rename("human_type"="Farmer/Neighbour/Consumer") %>% 
  rename("farmtype" = "Farming system") %>% 
  rename("sprint_sample_code"="Human sample Code") %>% 
  rename("Sex"="Gender")

#combine with metadata
Human_Faeces_PPP_meta <- Human_Faeces_PPP %>% 
dplyr:: select(-c(3,4)) %>%
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Human",.after=2) %>% 
  left_join(Human_Metadata_useable,by="sprint_sample_code") %>% 
  relocate(421,.after = "EHA" ) %>% 
  relocate(422,.after = "human_type") %>%
  relocate(423,.after = "Sex") %>% 
  relocate("Matrix",.after = "farmtype") %>% 
  mutate_at('farmtype', ~replace_na(., "unclassifiable"))

empty_columns <- colSums(is.na(Human_Faeces_PPP_meta)| Human_Faeces_PPP_meta=="")

#ensure same columnnames as blood dataset
#uniform colname

Name_Check <- Colnames_Check(Human_Faeces_PPP_meta,Human_Blood_PPP_meta)

Human_Faeces_PPP_meta_clean <- SPRINT_Cleaner(Human_Faeces_PPP_meta,"Glyphosate")


##2.5 combine Human Data#####################
Human_PPP_clean <- Human_Blood_PPP_meta_clean %>% 
  full_join(Human_Faeces_PPP_meta_clean) %>% 
  full_join(Human_Urine_combined_meta_clean_o) %>% 
  full_join(Human_Wristband_PPP_meta_clean_o)

write.xlsx(Human_PPP_clean, "../0_1_Data_ready_to_use/Human_PPP_Clean_03_11_2023.xlsx",rowNames=T)


#3.) Data Preparation Environment ####################################################

##3.1 Prepare Environment Plant PPP########
Environment_Plant_PPP <- Environment_Plant_4_5_2023[,-c(2,3)] %>% 
  row_to_names(row_number = 1) %>%
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  rename("plant_type"="Plant type") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Environment",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4)
  
#cleaning of the sprint_sample_code
Environment_Plant_PPP$sprint_sample_code <- gsub("_PL_P*","",Environment_Plant_PPP$sprint_sample_code)
Environment_Plant_PPP$sprint_sample_code <- gsub("_PL$","",Environment_Plant_PPP$sprint_sample_code)
Environment_Plant_PPP$sprint_sample_code <- gsub("_Pl.*","",Environment_Plant_PPP$sprint_sample_code)



#Calculate Mean of a sample measured twice
#Prepare the samples on which the mean has to be calculated
Environment_Plant_PPP_CH03 <- Environment_Plant_PPP %>% 
  filter(sprint_sample_code=="CH_EF03A"|sprint_sample_code=="CH_EF03B") %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(8:423),as.numeric)

#calculate the mean with excluding 0 values in the calculation
Environment_Plant_PPP_DP <- Environment_Plant_PPP_CH03 %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(8:423),as.numeric) %>% 
  summarise(across(where(is.numeric),funs(mean = mean(ifelse(. > 0, ., NA), na.rm = TRUE)))) %>% 
  mutate(sprint_sample_code = c("CH_EF03"),country = "CH",EHA="Environment",human_type="",Sex="",Matrix="Plant",plant_type="apples",.before=1) %>% 
  mutate_all(~ifelse(is.nan(.),NA,.))

#Make sure that only values that were really NA are counted as such. This replaces NAs which previously were a zero with the zero again
for(i in c(8:423)){
  Environment_Plant_PPP_DP[1,i] <- ifelse(is.na(Environment_Plant_PPP_DP[1,i]),Environment_Plant_PPP_CH03[1,i],Environment_Plant_PPP_DP[1,i])
}
#remove the _mean from the end of the columnnames
colnames(Environment_Plant_PPP_DP) <- sub("_mean$", "", colnames(Environment_Plant_PPP_DP))
#combine the Datasets
Environment_Plant_PPP <- rbind(Environment_Plant_PPP,Environment_Plant_PPP_DP) %>% 
  filter(sprint_sample_code!="CH_EF03A"&sprint_sample_code!="CH_EF03B")
  

Environment_Plant_PPP$sprint_sample_code <- gsub("\\(","",Environment_Plant_PPP$sprint_sample_code)
Environment_Plant_PPP$sprint_sample_code <- gsub("\\)","",Environment_Plant_PPP$sprint_sample_code)
Environment_Plant_PPP$sprint_sample_code <- gsub("A$","",Environment_Plant_PPP$sprint_sample_code)
Environment_Plant_PPP$sprint_sample_code <- gsub("B$","",Environment_Plant_PPP$sprint_sample_code)
Environment_Plant_PPP$sprint_sample_code <- gsub("C$","",Environment_Plant_PPP$sprint_sample_code)




#prepare Metadata
Environment_Metadata_useable <- Environment_Metadata[,c(6,4)] %>% 
  rename("sprint_sample_code" = "Field sample code") %>% 
  rename("farmtype" = "Farming system")

#combine with metadata
Environment_Plant_PPP_meta <- Environment_Plant_PPP[,-7] %>%
  left_join(Environment_Metadata_useable,by = "sprint_sample_code",keep=FALSE ) %>% 
  relocate(423,.after=5)

Name_Check <- Colnames_Check(Environment_Plant_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Environment_Plant_PPP_meta)| Environment_Plant_PPP=="")

Environment_Plant_PPP_meta_clean <- SPRINT_Cleaner(Environment_Plant_PPP_meta,"Glyphosate")


##3.2 Prepare Environment Soil ###############################
Environment_Soil_PPP <- Environment_Soil_15_12_2022[,-c(2,3)] %>% 
  row_to_names(row_number = 1) %>%
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Environment",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4)
  #filter(country != "AR")

#cleaning of sprint_sample_code
Environment_Soil_PPP$sprint_sample_code <- gsub("_S_P","",Environment_Soil_PPP$sprint_sample_code)

#prepare Metadata
Environment_Metadata_useable <- Environment_Metadata[,c(6,4)] %>% 
  rename("sprint_sample_code" = "Field sample code") %>% 
  rename("farmtype" = "Farming system")

#combine with metadata
Environment_Soil_PPP_meta <- Environment_Soil_PPP %>%
  left_join(Environment_Metadata_useable,by = "sprint_sample_code",keep=FALSE ) %>% 
  relocate(423,.after=5)

Name_Check <- Colnames_Check(Environment_Soil_PPP_meta,Human_Blood_PPP_meta)
empty_columns <- colSums(is.na(Environment_Soil_PPP_meta)| Environment_Soil_PPP_meta=="")

Environment_Soil_PPP_meta_clean <- SPRINT_Cleaner(Environment_Soil_PPP_meta,"Glyphosate")

##3.3 Prepare Environment Air #################
Environment_Air_PPP <- Environment_Air_dust_outdoor_28_07_2023[,-c(2,3)] %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Environment",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4) %>% 
  mutate_at(vars(8:422),as.character)

#prepare Metadata
Environment_Metadata_useable <- Environment_Metadata[,c(6,4)] %>% 
  rename("sprint_sample_code" = "Field sample code") %>% 
  rename("farmtype" = "Farming system")

#combine with metadata
Environment_Air_PPP_meta <- Environment_Air_PPP %>%
  left_join(Environment_Metadata_useable,by = "sprint_sample_code",keep=FALSE ) %>% 
  relocate(423,.after=5) %>% 
  mutate_at(vars(8:423),as.character)


Name_Check <- Colnames_Check(Environment_Soil_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Environment_Soil_PPP_meta)| Environment_Soil_PPP_meta=="")

Environment_Air_PPP_meta_clean <- SPRINT_Cleaner(Environment_Air_PPP_meta,"Glyphosate")

##3.4 Prepare Environment Indoor#####################################
Environment_Indoor_PPP_meta <- Environment_indoor_Dust_PPP_20_02_2023_update_07_06_23 %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  rename("human_type"="Human_type") %>% 
  rename("country" = "Country") %>% 
  #filter(country != "AR") %>% 
  mutate_at(vars(8:423),as.character)

#cleaning of sprint_sample_code
Environment_Indoor_PPP_meta$sprint_sample_code <-  gsub("_D_P", "",Environment_Indoor_PPP_meta$sprint_sample_code)
Environment_Indoor_PPP_meta$sprint_sample_code <-  gsub("_H16", "",Environment_Indoor_PPP_meta$sprint_sample_code)

#Calculate Mean of a sample measured twice---------------------------------------------------------------------------#
#Prepare the samples on which the mean has to be calculated
Environment_indoor_PPP_EF14 <- Environment_Indoor_PPP_meta %>% 
  filter(sprint_sample_code=="FR_EF14_H15_01"|sprint_sample_code=="FR_EF14_H15_02") %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(8:423),as.numeric)

#calculate the mean with excluding 0 values in the calculation
Environment_Indoor_PPP_DP <- Environment_indoor_PPP_EF14 %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(8:423),as.numeric) %>% 
  summarise(across(where(is.numeric),funs(mean = mean(ifelse(. > 0, ., NA), na.rm = TRUE)))) %>% 
  mutate(sprint_sample_code = c("FR_EF14"),country = "FR",EHA="Environment",human_type="",Sex="",Matrix="Indoor dust",farmtype="Organic",.before=1) %>% 
  mutate_all(~ifelse(is.nan(.),NA,.))

#Make sure that only values that were really NA are counted as such. This replaces NAs which previously were a zero with the zero again
for(i in c(8:423)){
  Environment_Indoor_PPP_DP[1,i] <- ifelse(is.na(Environment_Indoor_PPP_DP[1,i]),Environment_indoor_PPP_EF14[1,i],Environment_Indoor_PPP_DP[1,i])
}
#remove the _mean from the end of the columnnames
colnames(Environment_Indoor_PPP_DP) <- sub("_mean$", "", colnames(Environment_Indoor_PPP_DP))

#combine the Datasets and remove old rows of FR_EF14
Environment_Indoor_PPP_meta <- rbind(Environment_Indoor_PPP_meta,Environment_Indoor_PPP_DP) %>% 
  filter(sprint_sample_code!="FR_EF14_H15_01"&sprint_sample_code!="FR_EF14_H15_02")

Name_Check <- Colnames_Check(Environment_Indoor_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Environment_Indoor_PPP_meta)| Environment_Indoor_PPP_meta=="")

Environment_Indoor_PPP_meta_clean <- SPRINT_Cleaner(Environment_Indoor_PPP_meta,"Glyphosate")

##3.5 Prepare Environment Water ########################
Environment_Water_PPP_meta <- Environment_Water_4_2_2022[,-c(2,3)] %>% 
  row_to_names(row_number = 1) %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Environment",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4) %>% 
  mutate(farmtype = "unclassifiable",.after=5)
  #filter(country != "AR")


#cleaning of sprint_sample_code
Environment_Water_PPP_meta$sprint_sample_code <- gsub("_W.*","",Environment_Water_PPP_meta$sprint_sample_code)
Environment_Water_PPP_meta$sprint_sample_code <- gsub("-*","",Environment_Water_PPP_meta$sprint_sample_code)

#prepare Metadata
Environment_Metadata_useable <- Environment_Metadata[,c(6,4)] %>% 
  rename("sprint_sample_code" = "Field sample code") %>% 
  rename("farmtype" = "Farming system")

#combine with metadata
#Environment_Water_PPP_meta <- Environment_Water_PPP %>%
# left_join(Environment_Metadata_useable,by = "sprint_sample_code",keep=FALSE ) %>% 
# relocate(423,.after=5)

#Environment_Water_PPP_meta[42,6] <- "Organic"

Name_Check <- Colnames_Check(Environment_Water_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Environment_Water_PPP)| Environment_Water_PPP=="")

Environment_Water_PPP_meta_clean <- SPRINT_Cleaner(Environment_Water_PPP_meta,"Glyphosate")

##3.6 Prepare Environment Sediment##################################
Environment_Sediment_PPP_meta <- Environment_Sediment_PPP_01_02_23[,-c(2,3,5,6)] %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Environment",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4) %>% 
  mutate(farmtype = "unclassifiable",.after=5) %>% 
  #filter(country != "AR") %>% 
  mutate_at(vars(8:422),as.character)

#clean sample code
Environment_Sediment_PPP_meta$sprint_sample_code <- gsub("_Sed_P","",Environment_Sediment_PPP_meta$sprint_sample_code)

Name_Check <- Colnames_Check(Environment_Sediment_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Environment_Sediment_PPP)| Environment_Sediment_PPP=="")

Environment_Sediment_PPP_meta_clean <- SPRINT_Cleaner(Environment_Sediment_PPP_meta,"Glyphosate") 


##3.7 Prepare Environment Earthworm ############################
Environment_Earthworm_PPP <- Environment_Earthworm_final2_17_1_2023[,-c(2,3)] %>% 
  row_to_names(row_number = 1) %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Environment",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4)
  #filter(country != "AR")


#clean samplecode
Environment_Earthworm_PPP$sprint_sample_code <- gsub("_E_P","",Environment_Earthworm_PPP$sprint_sample_code)
Environment_Earthworm_PPP$sprint_sample_code <- gsub("new","",Environment_Earthworm_PPP$sprint_sample_code)


#prepare Metadata
Environment_Metadata_useable <- Environment_Metadata[,c(6,4)] %>% 
  rename("sprint_sample_code" = "Field sample code") %>% 
  rename("farmtype" = "Farming system")

#combine with metadata
Environment_Earthworm_PPP_meta <- Environment_Earthworm_PPP %>%
  left_join(Environment_Metadata_useable,by = "sprint_sample_code",keep=FALSE ) %>% 
  relocate(423,.after=5)

Name_Check <- Colnames_Check(Environment_Earthworm_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Environment_Earthworm_PPP_meta)| Environment_Earthworm_PPP_meta=="")

Environment_Earthworm_PPP_meta_clean <- SPRINT_Cleaner(Environment_Earthworm_PPP_meta,"Glyphosate")

##3.8 combine Environment datasets #########
Environment_PPP_clean <- Environment_Plant_PPP_meta_clean %>% 
  full_join(Environment_Soil_PPP_meta_clean) %>%
  full_join(Environment_Air_PPP_meta_clean) %>% 
  full_join(Environment_Water_PPP_meta_clean) %>% 
  full_join(Environment_Sediment_PPP_meta_clean) %>% 
  full_join(Environment_Indoor_PPP_meta_clean) %>% 
  full_join(Environment_Earthworm_PPP_meta_clean)

#write.xlsx(Environment_PPP_clean, "../0_1_Data_ready_to_use/Environment_PPP_Clean_03_11_2023.xlsx",rowNames=T)

#4.) Data Preparation Animal######################################################
##4.1 Prepare Animal Urine#############################
Animal_Urine_PPP <- Animal_urine_PPP_results_MULTI_12_7_2023_no_DPA_HM[-c(1,2),-c(2,3,6:11,16,25,43,46,48,49,55,58:117)] %>% 
  row_to_names(row_number = 1) %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Animal",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4) %>% 
  #filter(country != "AR") %>% 
  dplyr:: select(-"Animal type")

#clean samplecode
Animal_Urine_PPP$sprint_sample_code <- gsub(" U_.*","",Animal_Urine_PPP$sprint_sample_code)
Animal_Urine_PPP$sprint_sample_code <- gsub("L0","L",Animal_Urine_PPP$sprint_sample_code)
Animal_Urine_PPP$sprint_sample_code <- gsub("L(?=\\d{2})", "A", Animal_Urine_PPP$sprint_sample_code, perl = TRUE,) #the perl argument allows the lookahead
Animal_Urine_PPP$sprint_sample_code <- gsub("_F\\d{2}", "", Animal_Urine_PPP$sprint_sample_code, perl = TRUE,)

#Prepare Animal Metadata to compine with Dataset
Animal_Metadata_useable <- Animal_Metadata[,c(4,5)] %>% 
  rename("sprint_sample_code"="Animal sample code") %>% 
  rename("farmtype"="Farming system")


#join Dataset with Metadata
Animal_Urine_PPP_meta <- Animal_Urine_PPP %>% 
  left_join(Animal_Metadata_useable,by="sprint_sample_code",keep=FALSE) %>% 
  relocate(46,.after = 5) %>%
  mutate_at(vars(1:46),as.character)


Name_Check <- Colnames_Check(Animal_Urine_PPP_meta,Human_Blood_PPP_meta)
Urine_PPP <- colnames(Name_Check)
empty_columns <- colSums(is.na(Animal_Urine_PPP_meta)| Animal_Urine_PPP_meta=="")



Animal_Urine_PPP_meta_clean <- SPRINT_Cleaner_noLOQISSUE(Animal_Urine_PPP_meta,"Glyphosate")

#order columns in order to combine data
Animal_Urine_toOrder <- Animal_Urine_PPP_meta_clean %>% 
  dplyr:: select(!all_of(Urine_PPP))

Animal_Urine_BonusPPP <- Animal_Urine_PPP_meta_clean %>% 
  dplyr:: select(all_of(Urine_PPP))

Animal_Urine_ordered <- SPRINT_order(Human_Blood_PPP_meta_clean,Animal_Urine_toOrder)

Animal_Urine_PPP_meta_clean_o <- Animal_Urine_ordered %>% 
  bind_cols(Animal_Urine_BonusPPP)

##4.2 Prepare Animal Wristband #############################################################
Animal_Wristband_PPP <- Animal_Wristband_PPP_7_8_2023[-1,-c(2,3)] %>%
  row_to_names(row_number = 1) %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Animal",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4)

#clean samplecode
Animal_Wristband_PPP$sprint_sample_code <- gsub("_W_P.*","",Animal_Wristband_PPP$sprint_sample_code)
Animal_Wristband_PPP$sprint_sample_code <- gsub(" ","",Animal_Wristband_PPP$sprint_sample_code)
Animal_Wristband_PPP$sprint_sample_code <- gsub("-C","",Animal_Wristband_PPP$sprint_sample_code)
Animal_Wristband_PPP$sprint_sample_code <- gsub("H$","",Animal_Wristband_PPP$sprint_sample_code)



#Prepare Animal Metadata to compine with Dataset
Animal_Metadata_useable <- Animal_Metadata[,c(4,5)] %>% 
  rename("sprint_sample_code"="Animal sample code") %>% 
  rename("farmtype"="Farming system")

#Prepare Cat Metadata to compine with Dataset
Cat_Metadata_useable <- Cat_Metadata[,c(3,5)] %>% 
  rename("sprint_sample_code"="Cat sample ID") %>% 
  rename("farmtype"="Farming system")

Animal_Cat_Metadata_useable <- full_join(Animal_Metadata_useable,Cat_Metadata_useable)


#Calculate Mean of a sample measured twice---------------------------------------------------------------------------#
#Prepare the samples on which the mean has to be calculated
Animal_Wristband_PPP_CHA01 <- Animal_Wristband_PPP %>% 
  filter(sprint_sample_code=="CH_A01"|sprint_sample_code=="CH_A01-2") %>% 
  mutate_all(funs(str_replace(., "-", "0"))) %>% 
  mutate_at(vars(7:418),as.numeric)

#calculate the mean with excluding 0 values in the calculation
Animal_Wristband_PPP_DP <- Animal_Wristband_PPP_CHA01 %>% 
  summarise(across(where(is.numeric),funs(mean = mean(ifelse(. > 0, ., NA), na.rm = TRUE)))) %>% 
  mutate(sprint_sample_code = c("CH_A01_c"),country = "CH",EHA="Animal",human_type="",Sex="",Matrix="Wristband",.before=1) %>% 
  mutate_all(~ifelse(is.nan(.),NA,.))

#Make sure that only values that were really NA are counted as such. This replaces NAs which previously were a zero with the zero again
for(i in c(7:418)){
  Animal_Wristband_PPP_DP[1,i] <- ifelse(is.na(Animal_Wristband_PPP_DP[1,i]),Animal_Wristband_PPP_CHA01[1,i],Animal_Wristband_PPP_DP[1,i])
}


#remove the _mean from the end of the columnnames
colnames(Animal_Wristband_PPP_DP) <- sub("_mean$", "", colnames(Animal_Wristband_PPP_DP))

#combine the Datasets and remove old rows of FR_EF14
Animal_Wristband_PPP_meta <- rbind(Animal_Wristband_PPP,Animal_Wristband_PPP_DP) %>% 
  filter(sprint_sample_code!="CH_A01"&sprint_sample_code!="CH_A01-2") %>% 
  mutate(sprint_sample_code = str_replace(sprint_sample_code,"CH_A01_c","CH_A01"))





#Join Dataset with Metadata
Animal_Wristband_PPP_meta <- Animal_Wristband_PPP_meta %>% 
  left_join(Animal_Cat_Metadata_useable, by = "sprint_sample_code",keep=FALSE) %>% 
  relocate(419,.after = 5) %>% 
  mutate_at(vars(1:419),as.character)



Name_Check <- Colnames_Check(Animal_Wristband_PPP_meta,Human_Blood_PPP_meta)
empty_columns <- colSums(is.na(Animal_Wristband_PPP_meta)| Animal_Wristband_PPP_meta=="")
empty_columns <- rbind(Animal_Wristband_PPP_meta[1,1:ncol(Animal_Wristband_PPP_meta)],empty_columns)
#write.xlsx(empty_columns, "../444_Data_Preparation/Empty_Cells_perColumn_Animal_Wristband.xlsx",rowNames=T)

Animal_Wristband_PPP_meta_clean <- SPRINT_Cleaner(Animal_Wristband_PPP_meta,"2,4-D (free)")
Animal_Wristband_PPP_meta_clean_o <- SPRINT_order(Human_Blood_PPP_meta_clean,Animal_Wristband_PPP_meta_clean)
##4.3 Prepare Animal Faeces ################################
Animal_Faeces_PPP <- Animal_faeces_PPP_02_08_23[-c(1:4),-c(2,3,6)] %>% 
  row_to_names(row_number = 1) %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  rename("animal_type"="Animal type") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Animal",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4) %>% 
  #filter(country != "AR") %>%
  filter(animal_type != "bat") %>% 
  filter(!(animal_type == "cat" & country == "SL")) %>%     #removed SL cat samples as the code is not clear
  dplyr::select(-"animal_type")
  
#clean samplecode
Animal_Faeces_PPP$sprint_sample_code <- gsub("_F_P","",Animal_Faeces_PPP$sprint_sample_code)
Animal_Faeces_PPP$sprint_sample_code <- gsub("L0","L",Animal_Faeces_PPP$sprint_sample_code)
Animal_Faeces_PPP$sprint_sample_code <- gsub("L(?=\\d{2})", "A", Animal_Faeces_PPP$sprint_sample_code, perl = TRUE) #the perl argument allows the lookahead
Animal_Faeces_PPP$sprint_sample_code <- gsub("_F\\d{2}", "", Animal_Faeces_PPP$sprint_sample_code)
Animal_Faeces_PPP$sprint_sample_code <- gsub("_EF02","",Animal_Faeces_PPP$sprint_sample_code)
Animal_Faeces_PPP$sprint_sample_code <- gsub("_S","",Animal_Faeces_PPP$sprint_sample_code)
Animal_Faeces_PPP$sprint_sample_code <- gsub("_Cow.*","",Animal_Faeces_PPP$sprint_sample_code)


#Prepare Animal Metadata to compine with Dataset
Animal_Metadata_useable <- Animal_Metadata[,c(4,5)] %>% 
  rename("sprint_sample_code"="Animal sample code") %>% 
  rename("farmtype"="Farming system")

#Prepare Cat Metadata to compine with Dataset
Cat_Metadata_useable <- Cat_Metadata[,c(3,5)] %>% 
  rename("sprint_sample_code"="Cat sample ID") %>% 
  rename("farmtype"="Farming system")

Animal_Cat_Metadata_useable <- full_join(Animal_Metadata_useable,Cat_Metadata_useable)

#Join Dataset with Metadata
Animal_Faeces_PPP_meta <- Animal_Faeces_PPP %>% 
  left_join(Animal_Cat_Metadata_useable,by="sprint_sample_code",keep=FALSE) %>% 
  relocate(423,.after=5)


Name_Check <- Colnames_Check(Animal_Faeces_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Animal_Faeces_PPP_meta)| Animal_Faeces_PPP_meta=="")


Animal_Faeces_PPP_meta_clean <- SPRINT_Cleaner(Animal_Faeces_PPP_meta,"Glyphosate")

##4.4 Prepare Animal Feed Data####################################
Animal_Feed_PPP <- Animal_Feed_PPP_01_03_23[,-c(2,3,5,6)] %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>% 
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Animal",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4)
  #filter(country != "AR")

#clean sample code
Animal_Feed_PPP$sprint_sample_code <- gsub("_Feed.*","",Animal_Feed_PPP$sprint_sample_code)

#Prepare Animal Metadata to compine with Dataset
Animal_Metadata_useable <- Animal_Metadata[,c(4,5)] %>% 
  rename("sprint_sample_code"="Animal sample code") %>% 
  rename("farmtype"="Farming system")

Animal_Metadata_useable$sprint_sample_code <- gsub("_(?=\\d{1})","_A",Animal_Metadata_useable$sprint_sample_code,perl=TRUE)

Animal_Feed_PPP_meta <- Animal_Feed_PPP %>% 
  left_join(Animal_Metadata_useable,by="sprint_sample_code",keep=FALSE) %>% 
  relocate(423,.after = 5)
  



Name_Check <- Colnames_Check(Animal_Feed_PPP_meta_clean,Human_Blood_PPP_meta_clean)
empty_columns <- colSums(is.na(Animal_Feed_PPP_meta)| Animal_Feed_PPP_meta=="")


Animal_Feed_PPP_meta_clean <- SPRINT_Cleaner(Animal_Feed_PPP_meta,"Glyphosate") 



##4.5 Prepare Animal Blood Data ###########################
Animal_Blood_PPP <- Animal_Blood_PPP_09_10_2023 [,-c(2,3,5)] %>% 
  row_to_names(row_number = 1)

#prepare Animal Metadata
#Prepare Animal Metadata to compine with Dataset
Animal_Metadata_useable <- Animal_Metadata[,c(4,5)] %>% 
  rename("sprint_sample_code"="Animal sample code") %>% 
  rename("farmtype"="Farming system")

#Prepare Cat Metadata to compine with Dataset
Cat_Metadata_useable <- Cat_Metadata[,c(3,5)] %>% 
  rename("sprint_sample_code"="Cat sample ID") %>% 
  rename("farmtype"="Farming system")

Animal_Cat_Metadata_useable <- full_join(Animal_Metadata_useable,Cat_Metadata_useable)



#Cleaning Country ID and edit country column
#replace ES with SP
Animal_Blood_PPP <- Animal_Blood_PPP  %>% 
  rename("sprint_sample_code"="SPRINT Sample code") %>%  
  mutate(country = substring(sprint_sample_code,1,2),.after=1) %>%
  mutate(EHA = "Animal",.after=2) %>%
  mutate(human_type = "",.after=3) %>% 
  mutate(Sex = "",.after=4) %>% 
  relocate('Matrix',.after = "Sex")


Animal_Blood_PPP$Matrix <- gsub("Serum","Plasma",Animal_Blood_PPP$Matrix)
Animal_Blood_PPP$sprint_sample_code <- gsub("ES","SP",Animal_Blood_PPP$sprint_sample_code)
Animal_Blood_PPP$country <- gsub("ES","SP",Animal_Blood_PPP$country)
Animal_Blood_PPP$sprint_sample_code <- gsub("Sl","SL",Animal_Blood_PPP$sprint_sample_code)
Animal_Blood_PPP$country <- gsub("Sl","SL",Animal_Blood_PPP$country)
Animal_Blood_PPP$sprint_sample_code <- gsub("L0","L",Animal_Blood_PPP$sprint_sample_code)
Animal_Blood_PPP$sprint_sample_code <- gsub("L(?=\\d{2})", "A", Animal_Blood_PPP$sprint_sample_code, perl = TRUE,) #the perl argument allows the lookahead

#combine with Metadata
Animal_Blood_PPP_meta <- Animal_Blood_PPP %>% 
  left_join(Animal_Cat_Metadata_useable,by="sprint_sample_code", keep=FALSE) %>% 
  relocate(423,.after = 5) %>% 
  dplyr:: select(-"TCPy")


Name_Check <- Colnames_Check(Animal_Blood_PPP_meta_clean,Human_Blood_PPP_meta_clean)

Animal_Blood_PPP_meta_clean <- SPRINT_Cleaner(Animal_Blood_PPP_meta,"Glyphosate")


##4.6 combine animal PPP ####################################
Animal_PPP_clean <- Animal_Urine_PPP_meta_clean_o %>% 
  full_join(Animal_Wristband_PPP_meta_clean_o)%>% 
  full_join(Animal_Faeces_PPP_meta_clean) %>% 
  full_join(Animal_Feed_PPP_meta_clean) %>% 
  full_join(Animal_Blood_PPP_meta_clean)

write.xlsx(Animal_PPP_clean, "../0_1_Data_ready_to_use/Animal_PPP_Clean_03_11_2023.xlsx",rowNames=T)


#5.)combine all Data
PPP_All_Matrixes_clean <- Environment_PPP_clean %>% 
  full_join(Human_PPP_clean) %>% 
  full_join(Animal_PPP_clean)

write.csv(PPP_All_Matrixes_clean,"../0_1_Data_ready_to_use/All_Matrixes_PPP_Clean_03_11_23.csv",row.names = FALSE)
write.xlsx(PPP_All_Matrixes_clean, "../0_1_Data_ready_to_use/All_Matrixes_PPP_Clean_03_11_23.xlsx",rowNames=T)

